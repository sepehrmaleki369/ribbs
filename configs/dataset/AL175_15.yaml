# Massachusetts Roads Dataset Configuration
seed: 42  # Random seed
split_cfg:
  seed: 42
  index_save_pth: "/cvlabdata2/cvlab/home/oner/Sinergia2/AL175-inds"
  # index_save_pth: "/home/ri/Desktop/Projects/Datasets/AL175-inds"
  sources:
    - type: "ratio"
      # path: "/home/ri/Desktop/Projects/Datasets/AL175"
      path: "/cvlabdata2/cvlab/home/oner/Sinergia2/AL175"
      layout: "flat"
      modalities:
        image:
          pattern: "^cube_(.*)\\.npy$"
        label:
          pattern: "^lbl_(.*)\\.npy$"
        distance:
          pattern: "^distlbl_(.*)\\.npy$"
      ratios:
        train: 0.75
        valid: 0.2
        test:  0.05

base_modalities: ["label", "image"]


# -----------------------------------------------------------------------------
# Dimensionality & Patch Extraction
# -----------------------------------------------------------------------------
data_dim: 3                # 2 = 2D patches, 3 = 3D volumes
patch_size: 96            # XY patch size
patch_size_z: 96           # Z-depth (only for 3D)
small_window_size: 8       # window for texture/variance check
validate_road_ratio: false # enforce minimum label coverage
threshold: 0.05            # minimum road fraction if above = true
# max_images: 10           # limit number of loaded images (null = no limit)
# max_images: null           # limit number of loaded images (null = no limit)
# max_attempts: 10           # retries to find a valid patch

# -----------------------------------------------------------------------------
# Computed Modalities
# -----------------------------------------------------------------------------
save_computed: true               # save new distance/SDF files
compute_again_modalities: false   # overwrite existing if true

distance_threshold: 15.0          # clip distance maps (null = no clip)
# sdf_iterations: 3                 # dilation iterations before SDF
# sdf_thresholds: [-7, 7]           # clip range for SDF values

# -----------------------------------------------------------------------------
# DataLoader Settings
# -----------------------------------------------------------------------------
train_batch_size: 32
val_batch_size: 1
test_batch_size: 1
num_workers: 4
pin_memory: true

# -----------------------------------------------------------------------------
# Augmentation
# -----------------------------------------------------------------------------

augmentation:
# ───────────────────────── 2-D GEOMETRIC ─────────────────────────
  flip_h:                       # random left↔right mirror
    type: RandomHorizontalFlip
    params: {p: 0.5}
    modalities: ["image", "label", "distance", "sdf"]

  flip_v:                       # random top↕bottom mirror
    type: RandomVerticalFlip
    params: {p: 0.5}
    modalities: ["image", "label", "distance", "sdf"]

  rotate:                       # ±15° free rotation
    type: RandomRotation
    params: {degrees: 15.0, p: 0.5}
    modalities: ["image", "label", "distance", "sdf"]

  affine:                       # shift/zoom/shear/rot combo
    type: RandomAffine
    params:
      degrees: 10.0
      translate: [0.1, 0.1]
      scale: [0.9, 1.1]
      shear: 5.0
      p: 0.5
    modalities: ["image", "label", "distance", "sdf"]

  zoom_only:                    # pure zoom 80-120 % (no crop)
    type: RandomAffine
    params: {degrees: 0.0, translate: [0,0], scale: [0.8,1.2], p: 0.5}
    modalities: ["image", "label", "distance", "sdf"]

  shear:                        # small X-axis shear
    type: RandomShear
    params: {shear: [-5.0, 5.0], p: 0.3}
    modalities: ["image", "label", "distance", "sdf"]

  perspective:                  # mild four-point warp
    type: RandomPerspective
    params: {distortion_scale: 0.5, p: 0.3}
    modalities: ["image", "label", "distance", "sdf"]

  thin_plate_spline:            # smooth non-linear warp
    type: RandomThinPlateSpline
    params: {scale: 0.2, p: 0.3}
    modalities: ["image", "label", "distance", "sdf"]

  elastic:                      # elastic grid deformation
    type: RandomElasticTransform
    params:
      kernel_size: [31,31]
      sigma: [4.0,4.0]
      alpha: [1.0,1.0]
      p: 0.3
    modalities: ["image", "label", "distance", "sdf"]

# ──────────────────────── 2-D INTENSITY (IMAGE) ───────────────────
  auto_contrast:                # stretch histogram to full range
    type: RandomAutoContrast
    params: {clip_output: true, p: 0.5}
    modalities: ["image"]

  brightness:                   # random brightness scale
    type: RandomBrightness
    params: {brightness: [0.8,1.2], p: 0.5}
    modalities: ["image"]

  contrast:                     # random contrast scale
    type: RandomContrast
    params: {contrast: [0.8,1.2], p: 0.5}
    modalities: ["image"]

  saturation:                   # random saturation tweak
    type: RandomSaturation
    params: {saturation: [0.8,1.2], p: 0.5}
    modalities: ["image"]

  hue:                          # random hue shift
    type: RandomHue
    params: {hue: [-0.1,0.1], p: 0.5}
    modalities: ["image"]

  gamma:                        # gamma correction jitter
    type: RandomGamma
    params: {gamma: [0.8,1.2], gain: [1.0,1.0], p: 0.5}
    modalities: ["image"]

  equalize:                     # global histogram equalization
    type: RandomEqualize
    params: {p: 0.3}
    modalities: ["image"]

  clahe:                        # local contrast enhancement
    type: RandomClahe
    params: {clip_limit: [40.0,40.0], grid_size: [8,8], p: 0.3}
    modalities: ["image"]

  invert:                       # pixel value inversion
    type: RandomInvert
    params: {max_val: 1.0, p: 0.2}
    modalities: ["image"]

  box_blur:                     # mean blur with box kernel
    type: RandomBoxBlur
    params: {kernel_size: [3,3], p: 0.3}
    modalities: ["image"]

  gaussian_blur:                # gaussian blur (rand σ)
    type: RandomGaussianBlur
    params: {kernel_size: [3,3], sigma: [0.1,2.0], p: 0.3}
    modalities: ["image"]

  motion_blur:                  # linear motion blur
    type: RandomMotionBlur
    params: {kernel_size: 5, angle: 30.0, direction: 0.5, p: 0.3}
    modalities: ["image"]

  gaussian_noise:               # additive gaussian noise
    type: RandomGaussianNoise
    params: {mean: 0.0, std: 0.05, p: 0.3}
    modalities: ["image"]

  salt_pepper:                  # salt-and-pepper impulse noise
    type: RandomSaltAndPepperNoise
    params: {amount: [0.01,0.05], salt_vs_pepper: [0.4,0.6], p: 0.3}
    modalities: ["image"]

  rgb_shift:                    # independent R/G/B offsets
    type: RandomRGBShift
    params: {r_shift_limit: 0.2, g_shift_limit: 0.2, b_shift_limit: 0.2, p: 0.3}
    modalities: ["image"]

  jpeg:                         # differentiable JPEG artefacts
    type: RandomJPEG
    params: {jpeg_quality: [30.0,70.0], p: 0.3}
    modalities: ["image"]

  solarize:                     # invert above threshold
    type: RandomSolarize
    params: {thresholds: [0.1,0.3], additions: [0.0,0.1], p: 0.2}
    modalities: ["image"]

  posterize:                    # reduce colour bit-depth
    type: RandomPosterize
    params: {bits: [2,6], p: 0.2}
    modalities: ["image"]

  plasma_brightness:            # fractal brightness map
    type: RandomPlasmaBrightness
    params: {roughness: [0.1,0.7], intensity: [0.0,1.0], p: 0.2}
    modalities: ["image"]

  plasma_contrast:              # fractal contrast map
    type: RandomPlasmaContrast
    params: {roughness: [0.1,0.7], p: 0.2}
    modalities: ["image"]

  plasma_shadow:                # fractal dark-shadows mask
    type: RandomPlasmaShadow
    params: {roughness: [0.1,0.7], shade_intensity: [-1.0,0.0], shade_quantity: [0.0,1.0], p: 0.2}
    modalities: ["image"]

# ───────────────────────── 3-D GEOMETRIC ─────────────────────────
  flip_x:                       # mirror along width axis
    type: RandomHorizontalFlip3D
    params: {p: 0.5}
    modalities: ["image", "label", "distance", "sdf"]

  flip_y:                       # mirror along height axis
    type: RandomVerticalFlip3D
    params: {p: 0.5}
    modalities: ["image", "label", "distance", "sdf"]

  flip_z:                       # mirror along depth axis
    type: RandomDepthicalFlip3D
    params: {p: 0.5}
    modalities: ["image", "label", "distance", "sdf"]

  rotate_3d:                    # yaw/pitch/roll ±10°
    type: RandomRotation3D
    params: {degrees: [10.0,10.0,10.0], p: 0.5}
    modalities: ["image", "label", "distance", "sdf"]

  affine_3d:                    # 3-D shift/zoom/rot combo
    type: RandomAffine3D
    params:
      degrees: [5.0,5.0,5.0]
      translate: [0.05,0.05,0.05]
      scale: [0.9,1.1]
      p: 0.3
    modalities: ["image", "label", "distance", "sdf"]

  zoom_3d:                      # pure zoom 80-120 % in 3-D
    type: RandomAffine3D
    params: {degrees: [0,0,0], translate: [0,0,0], scale: [0.8,1.2], p: 0.5}
    modalities: ["image", "label", "distance", "sdf"]

  thin_plate_spline_3d:         # smooth volumetric warp
    type: RandomThinPlateSpline3D
    params: {scale: 0.2, p: 0.3}
    modalities: ["image", "label", "distance", "sdf"]

  elastic_3d:                   # volumetric elastic field
    type: RandomElasticTransform3D
    params:
      kernel_size: [31,31,31]
      sigma: [4.0,4.0,4.0]
      alpha: [1.0,1.0,1.0]
      p: 0.3
    modalities: ["image", "label", "distance", "sdf"]

# ──────────────────────── 3-D INTENSITY (IMAGE) ──────────────────
  equalize_3d:                  # histogram equalization 3-D
    type: RandomEqualize3D
    params: {p: 0.3}
    modalities: ["image"]

  motion_blur_3d:               # volumetric motion blur
    type: RandomMotionBlur3D
    params: {kernel_size: 3, angle: [10,10,10], direction: 0.5, p: 0.3}
    modalities: ["image"]


# -----------------------------------------------------------------------------
# Normalization Settings
# -----------------------------------------------------------------------------

normalization:
  image:
    method: "divide_by"    
    threshold: 255      

  # image:
    # method: "zscore"     # options: minmax, zscore, robust, percentile, clip
    # eps: !!float 1e-8         # lower bound of your data range (or null to infer from image)

  distance: 
    method: "clip"     # no extra parameters
    min_val: 0
    max_val: 15

  # # 3) Robust normalization: clip to [lower_q, upper_q] quantiles, then min–max to [0,1]
  # sdf:
  #   method: "clip"
  #   min_val: -7    
  #   max_val: 7  

  # label:
  #   method: "boolian"
  
  # label:
  #   method: "binarize"
  #   threshold: 127
  #   greater_is_road: True
  #   return_bool: true

order_ops: ["crop", "norm", "aug"]   # crop → normalise → augment 
# order_ops: ["norm", "aug", "crop"] # old behaviour
# order_ops: ["aug", "crop", "norm"] # yes, that works too


# -----------------------------------------------------------------------------
# Miscellaneous
# -----------------------------------------------------------------------------
verbose: false
