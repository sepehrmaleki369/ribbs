# Massachusetts Roads Dataset Configuration
seed: 42  # Random seed
split_cfg:
  seed: 42
  # index_save_pth: "/home/ri/Desktop/Projects/Datasets/Mass_Roads/inds"
  index_save_pth: "/cvlabdata2/cvlab/home/oner/Elyar/datasets/mass-inds"
  sources:
    - type: "folder"
      # path: "/home/ri/Desktop/Projects/Datasets/Mass_Roads/dataset"
      path: "/cvlabdata2/cvlab/home/oner/Elyar/datasets/dataset"
      layout: "folders"
      modalities:
        image:
          folder: "sat"
        label:
          folder: "label"
        # distance:
          # folder: "distance"
        sdf:
          folder: "sdf"
      splits:
        train: "train"
        valid: "valid"
        test:  "test"

base_modalities: ["label", "image"]


# -----------------------------------------------------------------------------
# Dimensionality & Patch Extraction
# -----------------------------------------------------------------------------
data_dim: 2                # 2 = 2D patches, 3 = 3D volumes
patch_size: 512            # XY patch size
# patch_size_z: 16           # Z-depth (only for 3D)
small_window_size: 8       # window for texture/variance check
validate_road_ratio: false # enforce minimum label coverage
threshold: 0.05            # minimum road fraction if above = true
# max_images: 2           # limit number of loaded images (null = no limit)
# max_images: null           # limit number of loaded images (null = no limit)
# max_attempts: 10           # retries to find a valid patch

# -----------------------------------------------------------------------------
# Computed Modalities
# -----------------------------------------------------------------------------
save_computed: true               # save new distance/SDF files
compute_again_modalities: false   # overwrite existing if true

# distance_threshold: 20.0          # clip distance maps (null = no clip)
sdf_iterations: 3                 # dilation iterations before SDF
sdf_thresholds: [-7, 7]           # clip range for SDF values

# -----------------------------------------------------------------------------
# DataLoader Settings
# -----------------------------------------------------------------------------
train_batch_size: 64
val_batch_size: 1
test_batch_size: 1
num_workers: 4
pin_memory: true

# -----------------------------------------------------------------------------
# Augmentation Pipeline
# -----------------------------------------------------------------------------
augmentations:
  - "flip_h"
  - "flip_v"
  - "rotation"
  # - "scale"
  # - "elastic"
  # - "brightness_contrast"
  # - "gamma"
  # - "gaussian_noise"
  # - "gaussian_blur"
  # - "bias_field"

augmentation_params:
  rotation:
    min: 0.0
    max: 360.0
  # scale:
  #   min: 3.8
  #   max: 5
  # elastic:
  #   alpha_min: 5.0
  #   alpha_max: 10.0
  #   sigma_min: 3.0
  #   sigma_max: 6.0
  # brightness_contrast:
  #   alpha_min: 0.9
  #   alpha_max: 1.1
  #   beta_min: -30.0
  #   beta_max: 30.0
  # gamma:
  #   min: 0.7
  #   max: 1.5
  # gaussian_noise:
  #   min: 0.01
  #   max: 0.03
  # gaussian_blur:
  #   min: 0.5
  #   max: 1.5
  # bias_field:
  #   min: 0.2
  #   max: 0.4

# -----------------------------------------------------------------------------
# Normalization Settings
# -----------------------------------------------------------------------------

normalization:
  # 1) Min–Max scaling: linearly map [old_min, old_max] → [new_min, new_max]
  image:
    method: "minmax"     # options: minmax, zscore, robust, percentile, clip
    old_min: 0.0         # lower bound of your data range (or null to infer from image)
    old_max: 255.0       # upper bound of your data range (or null to infer from image)
    new_min: 0.0         # target lower bound
    new_max: 1.0         # target upper bound

  # # 2) Z-Score normalization: subtract mean, divide by stddev
  # distance: 
  #   method: "zscore"     # no extra parameters
  #   eps: 1e-8          # optional: minimum stddev to avoid division by zero

  # # 3) Robust normalization: clip to [lower_q, upper_q] quantiles, then min–max to [0,1]
  # sdf:
  #   method: "robust"
  #   lower_q: 0.05        # clip below 5th percentile
  #   upper_q: 0.95        # clip above 95th percentile

  # 4) Percentile normalization: same as robust but percent arguments in percent units
  #    (i.e., q_low=1.0 means 1st percentile, q_high=99.0 means 99th percentile)
  # sdf:
  #   method: "percentile"
  #   q_low: 1.0
  #   q_high: 99.0

  # 5) Clip normalization: hard-clip to [min_val, max_val], then min–max to [0,1]
  #    Useful if you want to remove outliers or limit range explicitly.
  # label:
  #   method: "clip"
  #   min_val: 0.0         # clip values below this to 0.0
  #   max_val: 1.0         # clip values above this to 1.0

  # 6) Skip normalization entirely (e.g. binary labels already in {0,1})
  # label:
  #   method: null        # or simply set `label: null` to bypass


# -----------------------------------------------------------------------------
# Miscellaneous
# -----------------------------------------------------------------------------
verbose: false
